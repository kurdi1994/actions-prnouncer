[package]
name = "google-chats-pr-announcer"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
reqwest = { version = "0.11.9", features = ["json"] }
tokio = { version = "1.18.5", features = ["full"] }
serde = { version = "1.0.136", features = ["derive"] }
serde_json = "1.0.79"
log = "0.4.14"
simple_logger = "2.1.0"
anyhow = "1.0.53"
chrono = { version = "0.4.19", features = ["serde"] }
url = "2.5.0"
use reqwest::Client;
use serde_json::Value;
use tokio;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Erstellen des HTTP-Clients
    let client = Client::new();

    // Senden einer GET-Anfrage
    let response = client.get("https://api.example.com/data")
        .send()
        .await?;

    // Verarbeiten der Antwort
    let json: Value = response.json().await?;
    println!("{:#?}", json);

    Ok(())
}
// Importiert erforderliche Pakete
use reqwest::Client;
use serde_json::Value;
use tokio;

// Hauptfunktion, die eine asynchrone GET-Anfrage sendet
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Erstellen des HTTP-Clients
    let client = Client::new();

    // Senden der GET-Anfrage an eine Beispiel-API
    let response = client.get("https://api.example.com/data")
        .send()
        .await?;

    // Verarbeitet die Antwort und gibt sie als JSON aus
    let json: Value = response.json().await?;
    println!("{:#?}", json);

    Ok(())
